'''
O(N+M) - difficulty

Can be used for:
  - selection of bound componets
  - seach for shortest path 
  - recovery of shortest path 
  - search for shortest cycle in oriented graph
  - find all edges on the shortest path between a pair of vertexes(a, b)
  - find all vertexes on the shortest path between a pair of vertexes(a, b)
  - find shortest even path in graph(that is path of even distance)
'''

#input number of vertexes and edges
N, M = map(int, input.split())

#will store graph as a map with sets
graph = {i:set() for i in range(N)}
for i in range(M):
  #read an edge
  v1, v2 = map(int, input.split()).
  graph[v1].add(v2)
  graph[v2].add(v1)
  
  
#will use effective realisation of a queue for Collection framework(double signed list. probably)
from collections import deque
distances = [None] * N          #list of distances
start_vertex = 0                #starting with 0 vertex  
distances[start_vertex] = 0     #distance to yourself is 0
queue = deque([start_vertex])   #making a queue

while queue:                            #while queue in not empty
    cur_v = queue.popleft()             #put out the 1st element
    for neigh_v in graph[cur_v]:        #get through all of his neighbours
        if distance[neigh_v] is None:   #if nei is not visited(=> distance is None)
            distance[neigh_v] = distance[cur_v] + 1     #input read the distance
            queue.append(neigh_v)       #add to queue to check his neighbours
            
print(distances)    #see what happened



''' recovery of the shortest path '''
start_vertex = 0
end_vertex = 2

#start of the width seach.not needed if code above is perfomed
parents = [None] * N
distances = [None] * N
distances[start_vertex] = 0
queue = deque([start_vertex])

while queue:
  u = queue.popleft()
  for v in graph[u]:
    if distances[v] is None:
      distances[v] = distances[u] + 1
      parents[v] = u
      queue.append(v)
#end of the width seach.not needed if code above is perfomed

path = [end_vertex]
parent = parents[end_vertex]
while not parent in None:
   path.append(parent)
   parent = parents[parent]
print(path[::-1])  #



'''chess play as a horse'''
letters = 'abcdefgh'
numbers = '12345678'

graph = dict()
for l in letters:
  for n in numbers:
    graph[l+n] = set()
    
def add_edge(v1, v2):
  graph[v1].add(v2)
  graph[v2].add(v1)

#check borders
for i in range(8):
  for j  in range(8):
    v1 = letters[i] + numbers[j]
    
    if 0 <= i + 2 < 8 and 0 <=j + 1 < 8:
      v2 = letters[i+2] + numbers[j+1]
      add_edge(v1, v2)
      
    if 0 <= i - 2 < 8 and 0 <=j + 1 < 8:
      v2 = letters[i-2] + numbers[j+1]
      add_edge(v1, v2)
    
    if 0 <= i + 1 < 8 and 0 <=j + 2 < 8:
      v2 = letters[i-1] + numbers[j+2]
      add_edge(v1, v2)

    if 0 <= i - 1 < 8 and 0 <=j + 2 < 8:
      v2 = letters[i-1] + numbers[j+2]
      add_edge(v1, v2)
 

#recovery of the shortest horse path

from collections import deque
distances = {v: None for v in graph}

start_vertex = 'd4' 
end_vertex = 'f7'

distances[start_vertex] = 0     
queue = deque([start_vertex])

parents = {v: None for v in graph}

while queue:
    cur_v = queue.popleft()
    for neigh_v in graph[cur_v]:
        if distance[neigh_v] is None:
            distance[neigh_v] = distance[cur_v] + 1
            queue.append(neigh_v)
            
path = [end_vertex]
parent = parents[end_vertex]
while not parent in None:
   path.append(parent)
   parent = parents[parent]
print(path[::-1])  #show result


'''
recovery of the shortest cycle
  1. start depth search from each vertex
  2. once we try to reach visited vertex => found cycle
  3. start walkthrough from each vertex - select the shortest
'''


'''
find all vertexes on the shortest path(a,b)
  1. start depth search from a to b with distance count
  2. distance from vertex x store as d_a[x] and d_b[x]
  3. if d_a[x] + d_b[x] = d_a[b] => vertex on the shortest path
'''

'''
find all edges on the shortest path(a,b)
  1. start depth search from a to b with distance count
  2. distance from vertex x store as d_a[x] and d_b[x]
  3. for edge (u,v) check d_a[u] + 1 + d_b[v] = d_a[b]
  4. if equality => edge on the shortest path
'''


'''
find even path distance
  1. build assiting graph (each vertex turns into 2 vertexes : e0 and e1)
  2. each edge (u, v) turns into 2 edges: (u0, u1) and (u1, v0)
  3. find shortest even path from a to b == find the shortest path in new graph from a0 to b0
'''




